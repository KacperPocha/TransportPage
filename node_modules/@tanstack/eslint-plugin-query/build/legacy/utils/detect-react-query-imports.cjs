"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/detect-react-query-imports.ts
var detect_react_query_imports_exports = {};
__export(detect_react_query_imports_exports, {
  detectTanstackQueryImports: () => detectTanstackQueryImports
});
module.exports = __toCommonJS(detect_react_query_imports_exports);
var import_utils = require("@typescript-eslint/utils");
function detectTanstackQueryImports(create) {
  return (context, optionsWithDefault) => {
    const tanstackQueryImportSpecifiers = [];
    const helpers = {
      isSpecificTanstackQueryImport(node, source) {
        return !!tanstackQueryImportSpecifiers.find((specifier) => {
          var _a;
          if (specifier.type === import_utils.TSESTree.AST_NODE_TYPES.ImportSpecifier && ((_a = specifier.parent) == null ? void 0 : _a.type) === import_utils.TSESTree.AST_NODE_TYPES.ImportDeclaration && specifier.parent.source.value === source) {
            return node.name === specifier.local.name;
          }
          return false;
        });
      },
      isTanstackQueryImport(node) {
        return !!tanstackQueryImportSpecifiers.find((specifier) => {
          if (specifier.type === import_utils.TSESTree.AST_NODE_TYPES.ImportSpecifier) {
            return node.name === specifier.local.name;
          }
          return false;
        });
      }
    };
    const detectionInstructions = {
      ImportDeclaration(node) {
        if (node.specifiers.length > 0 && node.importKind === "value" && node.source.value.startsWith("@tanstack/") && node.source.value.endsWith("-query")) {
          tanstackQueryImportSpecifiers.push(...node.specifiers);
        }
      }
    };
    const ruleInstructions = create(context, optionsWithDefault, helpers);
    const enhancedRuleInstructions = {};
    const allKeys = new Set(
      Object.keys(detectionInstructions).concat(Object.keys(ruleInstructions))
    );
    allKeys.forEach((instruction) => {
      enhancedRuleInstructions[instruction] = (node) => {
        var _a, _b;
        if (instruction in detectionInstructions) {
          (_a = detectionInstructions[instruction]) == null ? void 0 : _a.call(detectionInstructions, node);
        }
        if (ruleInstructions[instruction]) {
          return (_b = ruleInstructions[instruction]) == null ? void 0 : _b.call(ruleInstructions, node);
        }
        return void 0;
      };
    });
    return enhancedRuleInstructions;
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  detectTanstackQueryImports
});
//# sourceMappingURL=detect-react-query-imports.cjs.map