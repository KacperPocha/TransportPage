{"version":3,"sources":["../../../../src/rules/no-rest-desctructuring/no-rest-destructuring.test.ts"],"sourcesContent":["import { ESLintUtils } from '@typescript-eslint/utils'\nimport { normalizeIndent } from '../../utils/test-utils'\nimport { rule } from './no-rest-destructuring.rule'\n\nconst ruleTester = new ESLintUtils.RuleTester({\n  parser: '@typescript-eslint/parser',\n  settings: {},\n})\n\nruleTester.run('no-rest-desctructuring', rule, {\n  valid: [\n    {\n      name: 'useQuery is not captured',\n      code: normalizeIndent`\n        import { useQuery } from '@tanstack/react-query'\n\n        function Component() {\n          useQuery()\n          return\n        }\n      `,\n    },\n    {\n      name: 'useQuery is not destructured',\n      code: normalizeIndent`\n          import { useQuery } from '@tanstack/react-query'\n\n          function Component() {\n            const query = useQuery()\n            return\n          }\n        `,\n    },\n    {\n      name: 'useQuery is destructured without rest',\n      code: normalizeIndent`\n          import { useQuery } from '@tanstack/react-query'\n\n          function Component() {\n            const { data, isLoading, isError } = useQuery()\n            return\n          }\n        `,\n    },\n    {\n      name: 'useInfiniteQuery is not captured',\n      code: normalizeIndent`\n        import { useInfiniteQuery } from '@tanstack/react-query'\n\n        function Component() {\n          useInfiniteQuery()\n          return\n        }\n      `,\n    },\n    {\n      name: 'useInfiniteQuery is not destructured',\n      code: normalizeIndent`\n          import { useInfiniteQuery } from '@tanstack/react-query'\n\n          function Component() {\n            const query = useInfiniteQuery()\n            return\n          }\n        `,\n    },\n    {\n      name: 'useInfiniteQuery is destructured without rest',\n      code: normalizeIndent`\n          import { useInfiniteQuery } from '@tanstack/react-query'\n\n          function Component() {\n            const { data, isLoading, isError } = useInfiniteQuery()\n            return\n          }\n        `,\n    },\n    {\n      name: 'useQueries is not captured',\n      code: normalizeIndent`\n        import { useQueries } from '@tanstack/react-query'\n\n        function Component() {\n          useQueries([])\n          return\n        }\n      `,\n    },\n    {\n      name: 'useQueries is not destructured',\n      code: normalizeIndent`\n          import { useQueries } from '@tanstack/react-query'\n\n          function Component() {\n            const queries = useQueries([])\n            return\n          }\n        `,\n    },\n    {\n      name: 'useQueries array has no rest destructured element',\n      code: normalizeIndent`\n          import { useQueries } from '@tanstack/react-query'\n\n          function Component() {\n            const [query1, { data, isLoading },, ...others] = useQueries([\n              { queryKey: ['key1'], queryFn: () => {} },\n              { queryKey: ['key2'], queryFn: () => {} },\n              { queryKey: ['key3'], queryFn: () => {} },\n              { queryKey: ['key4'], queryFn: () => {} },\n              { queryKey: ['key5'], queryFn: () => {} },\n            ])\n            return\n          }\n        `,\n    },\n    {\n      name: 'useQuery is destructured with rest but not from tanstack query',\n      code: normalizeIndent`\n        import { useQuery } from 'other-package'\n\n        function Component() {\n          const { data, ...rest } = useQuery()\n          return\n        }\n      `,\n    },\n    {\n      name: 'useInfiniteQuery is destructured with rest but not from tanstack query',\n      code: normalizeIndent`\n        import { useInfiniteQuery } from 'other-package'\n\n        function Component() {\n          const { data, ...rest } = useInfiniteQuery()\n          return\n        }\n      `,\n    },\n    {\n      name: 'useQueries array has rest destructured element but not from tanstack query',\n      code: normalizeIndent`\n          import { useQueries } from 'other-package'\n\n          function Component() {\n            const [query1, { data, ...rest }] = useQueries([\n              { queryKey: ['key1'], queryFn: () => {} },\n              { queryKey: ['key2'], queryFn: () => {} },\n            ])\n            return\n          }\n        `,\n    },\n  ],\n  invalid: [\n    {\n      name: 'useQuery is destructured with rest',\n      code: normalizeIndent`\n        import { useQuery } from '@tanstack/react-query'\n\n        function Component() {\n          const { data, ...rest } = useQuery()\n          return\n        }\n      `,\n      errors: [{ messageId: 'objectRestDestructure' }],\n    },\n    {\n      name: 'useInfiniteQuery is destructured with rest',\n      code: normalizeIndent`\n        import { useInfiniteQuery } from '@tanstack/react-query'\n\n        function Component() {\n          const { data, ...rest } = useInfiniteQuery()\n          return\n        }\n      `,\n      errors: [{ messageId: 'objectRestDestructure' }],\n    },\n    {\n      name: 'useQueries array has rest destructured element',\n      code: normalizeIndent`\n          import { useQueries } from '@tanstack/react-query'\n\n          function Component() {\n            const [query1, { data, ...rest }] = useQueries([\n              { queryKey: ['key1'], queryFn: () => {} },\n              { queryKey: ['key2'], queryFn: () => {} },\n            ])\n            return\n          }\n        `,\n      errors: [{ messageId: 'objectRestDestructure' }],\n    },\n  ],\n})\n"],"mappings":";AAAA,SAAS,mBAAmB;AAC5B,SAAS,uBAAuB;AAChC,SAAS,YAAY;AAErB,IAAM,aAAa,IAAI,YAAY,WAAW;AAAA,EAC5C,QAAQ;AAAA,EACR,UAAU,CAAC;AACb,CAAC;AAED,WAAW,IAAI,0BAA0B,MAAM;AAAA,EAC7C,OAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWR;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQN,QAAQ,CAAC,EAAE,WAAW,wBAAwB,CAAC;AAAA,IACjD;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQN,QAAQ,CAAC,EAAE,WAAW,wBAAwB,CAAC;AAAA,IACjD;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWN,QAAQ,CAAC,EAAE,WAAW,wBAAwB,CAAC;AAAA,IACjD;AAAA,EACF;AACF,CAAC;","names":[]}