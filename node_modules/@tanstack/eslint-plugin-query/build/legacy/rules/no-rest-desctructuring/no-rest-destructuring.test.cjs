"use strict";

// src/rules/no-rest-desctructuring/no-rest-destructuring.test.ts
var import_utils = require("@typescript-eslint/utils");
var import_test_utils = require("../../utils/test-utils.cjs");
var import_no_rest_destructuring = require("./no-rest-destructuring.rule.cjs");
var ruleTester = new import_utils.ESLintUtils.RuleTester({
  parser: "@typescript-eslint/parser",
  settings: {}
});
ruleTester.run("no-rest-desctructuring", import_no_rest_destructuring.rule, {
  valid: [
    {
      name: "useQuery is not captured",
      code: import_test_utils.normalizeIndent`
        import { useQuery } from '@tanstack/react-query'

        function Component() {
          useQuery()
          return
        }
      `
    },
    {
      name: "useQuery is not destructured",
      code: import_test_utils.normalizeIndent`
          import { useQuery } from '@tanstack/react-query'

          function Component() {
            const query = useQuery()
            return
          }
        `
    },
    {
      name: "useQuery is destructured without rest",
      code: import_test_utils.normalizeIndent`
          import { useQuery } from '@tanstack/react-query'

          function Component() {
            const { data, isLoading, isError } = useQuery()
            return
          }
        `
    },
    {
      name: "useInfiniteQuery is not captured",
      code: import_test_utils.normalizeIndent`
        import { useInfiniteQuery } from '@tanstack/react-query'

        function Component() {
          useInfiniteQuery()
          return
        }
      `
    },
    {
      name: "useInfiniteQuery is not destructured",
      code: import_test_utils.normalizeIndent`
          import { useInfiniteQuery } from '@tanstack/react-query'

          function Component() {
            const query = useInfiniteQuery()
            return
          }
        `
    },
    {
      name: "useInfiniteQuery is destructured without rest",
      code: import_test_utils.normalizeIndent`
          import { useInfiniteQuery } from '@tanstack/react-query'

          function Component() {
            const { data, isLoading, isError } = useInfiniteQuery()
            return
          }
        `
    },
    {
      name: "useQueries is not captured",
      code: import_test_utils.normalizeIndent`
        import { useQueries } from '@tanstack/react-query'

        function Component() {
          useQueries([])
          return
        }
      `
    },
    {
      name: "useQueries is not destructured",
      code: import_test_utils.normalizeIndent`
          import { useQueries } from '@tanstack/react-query'

          function Component() {
            const queries = useQueries([])
            return
          }
        `
    },
    {
      name: "useQueries array has no rest destructured element",
      code: import_test_utils.normalizeIndent`
          import { useQueries } from '@tanstack/react-query'

          function Component() {
            const [query1, { data, isLoading },, ...others] = useQueries([
              { queryKey: ['key1'], queryFn: () => {} },
              { queryKey: ['key2'], queryFn: () => {} },
              { queryKey: ['key3'], queryFn: () => {} },
              { queryKey: ['key4'], queryFn: () => {} },
              { queryKey: ['key5'], queryFn: () => {} },
            ])
            return
          }
        `
    },
    {
      name: "useQuery is destructured with rest but not from tanstack query",
      code: import_test_utils.normalizeIndent`
        import { useQuery } from 'other-package'

        function Component() {
          const { data, ...rest } = useQuery()
          return
        }
      `
    },
    {
      name: "useInfiniteQuery is destructured with rest but not from tanstack query",
      code: import_test_utils.normalizeIndent`
        import { useInfiniteQuery } from 'other-package'

        function Component() {
          const { data, ...rest } = useInfiniteQuery()
          return
        }
      `
    },
    {
      name: "useQueries array has rest destructured element but not from tanstack query",
      code: import_test_utils.normalizeIndent`
          import { useQueries } from 'other-package'

          function Component() {
            const [query1, { data, ...rest }] = useQueries([
              { queryKey: ['key1'], queryFn: () => {} },
              { queryKey: ['key2'], queryFn: () => {} },
            ])
            return
          }
        `
    }
  ],
  invalid: [
    {
      name: "useQuery is destructured with rest",
      code: import_test_utils.normalizeIndent`
        import { useQuery } from '@tanstack/react-query'

        function Component() {
          const { data, ...rest } = useQuery()
          return
        }
      `,
      errors: [{ messageId: "objectRestDestructure" }]
    },
    {
      name: "useInfiniteQuery is destructured with rest",
      code: import_test_utils.normalizeIndent`
        import { useInfiniteQuery } from '@tanstack/react-query'

        function Component() {
          const { data, ...rest } = useInfiniteQuery()
          return
        }
      `,
      errors: [{ messageId: "objectRestDestructure" }]
    },
    {
      name: "useQueries array has rest destructured element",
      code: import_test_utils.normalizeIndent`
          import { useQueries } from '@tanstack/react-query'

          function Component() {
            const [query1, { data, ...rest }] = useQueries([
              { queryKey: ['key1'], queryFn: () => {} },
              { queryKey: ['key2'], queryFn: () => {} },
            ])
            return
          }
        `,
      errors: [{ messageId: "objectRestDestructure" }]
    }
  ]
});
//# sourceMappingURL=no-rest-destructuring.test.cjs.map