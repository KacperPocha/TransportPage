"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/rules/no-rest-desctructuring/no-rest-destructuring.rule.ts
var no_rest_destructuring_rule_exports = {};
__export(no_rest_destructuring_rule_exports, {
  name: () => name,
  rule: () => rule
});
module.exports = __toCommonJS(no_rest_destructuring_rule_exports);
var import_utils = require("@typescript-eslint/utils");
var import_create_rule = require("../../utils/create-rule.cjs");
var import_ast_utils = require("../../utils/ast-utils.cjs");
var import_no_rest_destructuring = require("./no-rest-destructuring.utils.cjs");
var name = "no-rest-destructuring";
var queryHooks = ["useQuery", "useQueries", "useInfiniteQuery"];
var rule = (0, import_create_rule.createRule)({
  name,
  meta: {
    type: "problem",
    docs: {
      description: "Disallows rest destructuring in queries",
      recommended: "warn"
    },
    messages: {
      objectRestDestructure: `Object rest destructuring on a query will observe all changes to the query, leading to excessive re-renders.`
    },
    schema: []
  },
  defaultOptions: [],
  create(context, _, helpers) {
    return {
      CallExpression(node) {
        var _a;
        if (!import_ast_utils.ASTUtils.isIdentifierWithOneOfNames(node.callee, queryHooks) || !helpers.isTanstackQueryImport(node.callee) || ((_a = node.parent) == null ? void 0 : _a.type) !== import_utils.AST_NODE_TYPES.VariableDeclarator) {
          return;
        }
        const returnValue = node.parent.id;
        if (node.callee.name !== "useQueries") {
          if (import_no_rest_destructuring.NoRestDestructuringUtils.isObjectRestDestructuring(returnValue)) {
            context.report({
              node: node.parent,
              messageId: "objectRestDestructure"
            });
          }
          return;
        }
        if (returnValue.type !== import_utils.AST_NODE_TYPES.ArrayPattern) {
          return;
        }
        returnValue.elements.forEach((queryResult) => {
          if (queryResult === null) {
            return;
          }
          if (import_no_rest_destructuring.NoRestDestructuringUtils.isObjectRestDestructuring(queryResult)) {
            context.report({
              node: queryResult,
              messageId: "objectRestDestructure"
            });
          }
        });
      }
    };
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  name,
  rule
});
//# sourceMappingURL=no-rest-destructuring.rule.cjs.map