"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/rules/stable-query-client/stable-query-client.rule.ts
var stable_query_client_rule_exports = {};
__export(stable_query_client_rule_exports, {
  name: () => name,
  rule: () => rule
});
module.exports = __toCommonJS(stable_query_client_rule_exports);
var import_utils = require("@typescript-eslint/utils");
var import_ast_utils = require("../../utils/ast-utils.cjs");
var import_create_rule = require("../../utils/create-rule.cjs");
var name = "stable-query-client";
var rule = (0, import_create_rule.createRule)({
  name,
  meta: {
    type: "problem",
    docs: {
      description: "Makes sure that QueryClient is stable",
      recommended: "error"
    },
    messages: {
      unstable: [
        "QueryClient is not stable. It should be either extracted from the component or wrapped in React.useState.",
        "See https://tkdodo.eu/blog/react-query-fa-qs#2-the-queryclient-is-not-stable"
      ].join("\n"),
      fixTo: "Fix to {{result}}"
    },
    hasSuggestions: true,
    fixable: "code",
    schema: []
  },
  defaultOptions: [],
  create(context, _, helpers) {
    return {
      NewExpression(node) {
        var _a;
        if (node.callee.type !== import_utils.AST_NODE_TYPES.Identifier || node.callee.name !== "QueryClient" || ((_a = node.parent) == null ? void 0 : _a.type) !== import_utils.AST_NODE_TYPES.VariableDeclarator || !helpers.isSpecificTanstackQueryImport(
          node.callee,
          "@tanstack/react-query"
        )) {
          return;
        }
        const fnAncestor = import_ast_utils.ASTUtils.getFunctionAncestor(context);
        const isReactServerComponent = (fnAncestor == null ? void 0 : fnAncestor.async) === true;
        if (!import_ast_utils.ASTUtils.isValidReactComponentOrHookName(fnAncestor == null ? void 0 : fnAncestor.id) || isReactServerComponent) {
          return;
        }
        context.report({
          node: node.parent,
          messageId: "unstable",
          fix: (() => {
            const { parent } = node;
            if (parent.id.type !== import_utils.AST_NODE_TYPES.Identifier) {
              return;
            }
            const nodeText = context.getSourceCode().getText(node);
            const variableName = parent.id.name;
            return (fixer) => {
              return fixer.replaceTextRange(
                [parent.range[0], parent.range[1]],
                `[${variableName}] = React.useState(() => ${nodeText})`
              );
            };
          })()
        });
      }
    };
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  name,
  rule
});
//# sourceMappingURL=stable-query-client.rule.cjs.map