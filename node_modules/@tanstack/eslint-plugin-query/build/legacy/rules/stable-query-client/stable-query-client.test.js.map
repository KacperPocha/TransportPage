{"version":3,"sources":["../../../../src/rules/stable-query-client/stable-query-client.test.ts"],"sourcesContent":["import { ESLintUtils } from '@typescript-eslint/utils'\nimport { normalizeIndent } from '../../utils/test-utils'\nimport { rule } from './stable-query-client.rule'\n\nconst ruleTester = new ESLintUtils.RuleTester({\n  parser: '@typescript-eslint/parser',\n  settings: {},\n})\n\nruleTester.run('stable-query-client', rule, {\n  valid: [\n    {\n      name: 'QueryClient is stable when wrapped in React.useState',\n      code: normalizeIndent`\n        import { QueryClient } from \"@tanstack/react-query\";\n\n        function Component() {\n          const [queryClient] = React.useState(() => new QueryClient());\n          return;\n        }\n      `,\n    },\n    {\n      name: 'QueryClient is stable when wrapped in useState',\n      code: normalizeIndent`\n        import { QueryClient } from \"@tanstack/react-query\";\n\n        function Component() {\n          const [queryClient] = useState(() => new QueryClient());\n          return;\n        }\n      `,\n    },\n    {\n      name: 'QueryClient is stable when wrapped in React.useMemo',\n      code: normalizeIndent`\n          import { QueryClient } from \"@tanstack/react-query\";\n  \n          function Component() {\n            const [queryClient] = React.useMemo(() => new QueryClient(), []);\n            return;\n          }\n        `,\n    },\n    {\n      name: 'QueryClient is stable when wrapped in useAnything',\n      code: normalizeIndent`\n          import { QueryClient } from \"@tanstack/react-query\";\n  \n          function Component() {\n            const [queryClient] = useAnything(() => new QueryClient());\n            return;\n          }\n        `,\n    },\n    {\n      name: 'QueryClient is imported from a non-tanstack package',\n      code: normalizeIndent`\n        import { QueryClient } from \"other-library\";\n\n        function Component() {\n          const queryClient = new QueryClient();\n          return;\n        }\n      `,\n    },\n    {\n      name: 'QueryClient is not imported from @tanstack/react-query',\n      code: normalizeIndent`\n        import { QueryClient } from \"@tanstack/solid-query\";\n\n        function Component() {\n          const queryClient = new QueryClient();\n          return;\n        }\n      `,\n    },\n    {\n      name: 'QueryClient is invoked outside of a function',\n      code: normalizeIndent`\n        import { QueryClient } from \"@tanstack/solid-query\";\n\n        const queryClient = new QueryClient();\n\n        function Component() {\n          return;\n        }\n      `,\n    },\n    {\n      name: 'QueryClient is invoked in a non-component function',\n      code: normalizeIndent`\n        import { QueryClient } from \"@tanstack/solid-query\";\n\n        function someFn() {\n          const queryClient = new QueryClient();\n          return;\n        }\n      `,\n    },\n    {\n      name: 'QueryClient is invoked in an async (react server) component',\n      code: normalizeIndent`\n        import { QueryClient } from \"@tanstack/solid-query\";\n\n        async function AsyncComponent() {\n          const queryClient = new QueryClient();\n          return;\n        }\n      `,\n    },\n  ],\n  invalid: [\n    {\n      name: 'QueryClient is not stable when it is not wrapped in React.useState in component',\n      code: normalizeIndent`\n        import { QueryClient } from \"@tanstack/react-query\";\n\n        function Component() {\n          const queryClient = new QueryClient();\n          return;\n        }\n      `,\n      output: normalizeIndent`\n        import { QueryClient } from \"@tanstack/react-query\";\n\n        function Component() {\n          const [queryClient] = React.useState(() => new QueryClient());\n          return;\n        }\n      `,\n      errors: [{ messageId: 'unstable' }],\n    },\n    {\n      name: 'QueryClient is not stable when it is not wrapped in React.useState in custom hook',\n      code: normalizeIndent`\n        import { QueryClient } from \"@tanstack/react-query\";\n\n        function useHook() {\n          const queryClient = new QueryClient();\n          return;\n        }\n      `,\n      output: normalizeIndent`\n        import { QueryClient } from \"@tanstack/react-query\";\n\n        function useHook() {\n          const [queryClient] = React.useState(() => new QueryClient());\n          return;\n        }\n      `,\n      errors: [{ messageId: 'unstable' }],\n    },\n    {\n      name: 'preserve QueryClient options',\n      code: normalizeIndent`\n        import { QueryClient } from \"@tanstack/react-query\";\n\n        function Component() {\n          const queryClient = new QueryClient({ defaultOptions: { /* */ } });\n          return;\n        }\n      `,\n      output: normalizeIndent`\n        import { QueryClient } from \"@tanstack/react-query\";\n\n        function Component() {\n          const [queryClient] = React.useState(() => new QueryClient({ defaultOptions: { /* */ } }));\n          return;\n        }\n      `,\n      errors: [{ messageId: 'unstable' }],\n    },\n    {\n      name: 'preserve QueryClient variable declarator name',\n      code: normalizeIndent`\n        import { QueryClient } from \"@tanstack/react-query\";\n\n        function Component() {\n          const customName = new QueryClient();\n          return;\n        }\n      `,\n      output: normalizeIndent`\n        import { QueryClient } from \"@tanstack/react-query\";\n\n        function Component() {\n          const [customName] = React.useState(() => new QueryClient());\n          return;\n        }\n      `,\n      errors: [{ messageId: 'unstable' }],\n    },\n  ],\n})\n"],"mappings":";AAAA,SAAS,mBAAmB;AAC5B,SAAS,uBAAuB;AAChC,SAAS,YAAY;AAErB,IAAM,aAAa,IAAI,YAAY,WAAW;AAAA,EAC5C,QAAQ;AAAA,EACR,UAAU,CAAC;AACb,CAAC;AAED,WAAW,IAAI,uBAAuB,MAAM;AAAA,EAC1C,OAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQR;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQN,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQR,QAAQ,CAAC,EAAE,WAAW,WAAW,CAAC;AAAA,IACpC;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQN,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQR,QAAQ,CAAC,EAAE,WAAW,WAAW,CAAC;AAAA,IACpC;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQN,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQR,QAAQ,CAAC,EAAE,WAAW,WAAW,CAAC;AAAA,IACpC;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQN,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQR,QAAQ,CAAC,EAAE,WAAW,WAAW,CAAC;AAAA,IACpC;AAAA,EACF;AACF,CAAC;","names":[]}