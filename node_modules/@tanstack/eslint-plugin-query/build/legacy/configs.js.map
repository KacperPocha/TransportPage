{"version":3,"sources":["../../src/configs.ts"],"sourcesContent":["import { rules } from './rules'\nimport type { TSESLint } from '@typescript-eslint/utils'\n\nfunction generateRecommendedConfig(\n  allRules: Record<string, TSESLint.RuleModule<any, any>>,\n) {\n  return Object.entries(allRules).reduce(\n    (memo, [name, rule]) => {\n      const { recommended } = rule.meta.docs || {}\n\n      return {\n        ...memo,\n        ...(recommended ? { [`@tanstack/query/${name}`]: recommended } : {}),\n      }\n    },\n    {} as Record<string, 'strict' | 'error' | 'warn'>,\n  )\n}\n\nexport const configs = {\n  recommended: {\n    plugins: ['@tanstack/eslint-plugin-query'],\n    rules: generateRecommendedConfig(rules),\n  },\n}\n"],"mappings":";AAAA,SAAS,aAAa;AAGtB,SAAS,0BACP,UACA;AACA,SAAO,OAAO,QAAQ,QAAQ,EAAE;AAAA,IAC9B,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM;AACtB,YAAM,EAAE,YAAY,IAAI,KAAK,KAAK,QAAQ,CAAC;AAE3C,aAAO;AAAA,QACL,GAAG;AAAA,QACH,GAAI,cAAc,EAAE,CAAC,mBAAmB,IAAI,EAAE,GAAG,YAAY,IAAI,CAAC;AAAA,MACpE;AAAA,IACF;AAAA,IACA,CAAC;AAAA,EACH;AACF;AAEO,IAAM,UAAU;AAAA,EACrB,aAAa;AAAA,IACX,SAAS,CAAC,+BAA+B;AAAA,IACzC,OAAO,0BAA0B,KAAK;AAAA,EACxC;AACF;","names":[]}