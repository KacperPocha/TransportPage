{"version":3,"sources":["../../../src/__tests__/exhaustive-deps.test.ts"],"sourcesContent":["import { ESLintUtils } from '@typescript-eslint/utils'\nimport { normalizeIndent } from '../utils/test-utils'\nimport { rule } from '../rules/exhaustive-deps.rule'\n\nconst ruleTester = new ESLintUtils.RuleTester({\n  parser: '@typescript-eslint/parser',\n  settings: {},\n})\n\nruleTester.run('exhaustive-deps', rule, {\n  valid: [\n    {\n      name: 'should pass when deps are passed in array (react)',\n      code: 'useQuery({ queryKey: [\"todos\"], queryFn: fetchTodos });',\n    },\n    {\n      name: 'should pass when deps are passed in array (solid)',\n      code: 'createQuery({ queryKey: [\"todos\"], queryFn: fetchTodos });',\n    },\n    {\n      name: 'should pass when deps are passed in array',\n      code: 'useQuery({ queryKey: [\"entity\", id], queryFn: () => api.getEntity(id) });',\n    },\n    {\n      name: 'should pass when deps are passed in template literal',\n      // eslint-disable-next-line no-template-curly-in-string\n      code: 'useQuery({ queryKey: [`entity/${id}`], queryFn: () => api.getEntity(id) });',\n    },\n    {\n      name: 'should not pass fetch',\n      code: 'useQuery({ queryKey: [\"entity\", id], queryFn: () => fetch(id) });',\n    },\n    {\n      name: 'should not pass axios.get',\n      code: 'useQuery({ queryKey: [\"entity\", id], queryFn: () => axios.get(id) });',\n    },\n    {\n      name: 'should not pass api.entity.get',\n      code: 'useQuery({ queryKey: [\"entity\", id], queryFn: () => api.entity.get(id) });',\n    },\n    {\n      name: 'should not pass api when is being used for calling a function',\n      code: `\n        import useApi from './useApi'\n\n        const useFoo = () => {\n          const api = useApi();\n          return useQuery({\n            queryKey: ['foo'],\n            queryFn: () => api.fetchFoo(),\n          })\n        }\n      `,\n    },\n    {\n      name: 'should pass props.src',\n      code: `\n        function MyComponent(props) {\n            useQuery({ queryKey: [\"entity\", props.src], queryFn: () => api.entity.get(props.src) });\n        }\n      `,\n    },\n    {\n      name: 'identify !!props.id (unary expression)',\n      code: `\n        function MyComponent(props) {\n            useQuery({ queryKey: [\"entity\", !!props.id], queryFn: () => api.entity.get(props.id) });\n        }\n      `,\n    },\n    {\n      name: 'identify props?.id (chain expression)',\n      code: `\n        function MyComponent(props) {\n            useQuery({ queryKey: [\"entity\", props?.id], queryFn: () => api.entity.get(props?.id) });\n        }\n      `,\n    },\n    {\n      name: 'identify props!.id (ts non null expression)',\n      code: `\n        function MyComponent(props) {\n            useQuery({ queryKey: [\"entity\", props!.id], queryFn: () => api.entity.get(props!.id) });\n        }\n      `,\n    },\n    {\n      name: 'should ignore keys from callback',\n      code: `\n        function MyComponent(props) {\n            useQuery({\n              queryKey: [\"foo\", dep1],\n              queryFn: ({ queryKey: [, dep] }) => fetch(dep),\n            });\n        }\n      `,\n    },\n    {\n      name: 'should ignore type identifiers',\n      code: `\n        type Result = {};\n        function MyComponent(props) {\n            useQuery({\n              queryKey: [\"foo\", dep],\n              queryFn: () => api.get<Result>(dep),\n            });\n        }\n      `,\n    },\n    {\n      name: 'should add \"...args\" to deps',\n      code: `\n        function foo(...args) {}\n        function useData(arg, ...args) {\n          return useQuery({\n            queryKey: ['foo', arg, ...args],\n            queryFn: async () => foo([arg, ...args])\n          });\n        }\n      `,\n    },\n    {\n      name: 'should not add class to deps',\n      code: `\n        class Foo {}\n        useQuery({ queryKey: ['foo'], queryFn: async () => new Foo() });\n      `,\n    },\n    {\n      name: 'should not add `undefined` to deps',\n      code: `\n        useQuery({\n          queryKey: [],\n          queryFn: async () => {\n            if (undefined) {\n              return null;\n            }\n            return 1\n          },\n        });\n      `,\n    },\n    {\n      name: 'should not fail when queryKey is a queryKeyFactory while having a dep as first arg',\n      code: normalizeIndent`\n        const fooQueryKeyFactory = {\n          foo: () => ['foo'] as const,\n          num: (num: number) => [...fooQueryKeyFactory.foo(), num] as const,\n        }\n        \n        const useFoo = (num: number) =>\n          useQuery({\n            queryKey: fooQueryKeyFactory.foo(num),\n            queryFn: () => Promise.resolve(num),\n          })\n      `,\n    },\n    {\n      name: 'should not fail when queryKey is a queryKeyFactory while having a dep in object',\n      code: normalizeIndent`\n        const fooQueryKeyFactory = {\n          foo: () => ['foo'] as const,\n          num: (num: number) => [...fooQueryKeyFactory.foo(), num] as const,\n        }\n        \n        const useFoo = (num: number) =>\n          useQuery({\n            queryKey: fooQueryKeyFactory.foo({ x: num }),\n            queryFn: () => Promise.resolve(num),\n          })\n      `,\n    },\n    {\n      name: 'should not fail when queryKey is a queryKeyFactory while having a dep in object 2',\n      code: normalizeIndent`\n        const fooQueryKeyFactory = {\n          foo: () => ['foo'] as const,\n          num: (num: number) => [...fooQueryKeyFactory.foo(), num] as const,\n        }\n        \n        const useFoo = (num: number) =>\n          useQuery({\n            queryKey: fooQueryKeyFactory.foo({ num }),\n            queryFn: () => Promise.resolve(num),\n          })\n      `,\n    },\n    {\n      name: 'should not fail when queryKey is a queryKeyFactory while having a dep in array',\n      code: normalizeIndent`\n        const fooQueryKeyFactory = {\n          foo: () => ['foo'] as const,\n          num: (num: number) => [...fooQueryKeyFactory.foo(), num] as const,\n        }\n        \n        const useFoo = (num: number) =>\n          useQuery({\n              queryKey: fooQueryKeyFactory.foo([num]),\n              queryFn: () => Promise.resolve(num),\n          })\n      `,\n    },\n    {\n      name: 'should not fail when queryKey is a queryKeyFactory while having a dep in second arg',\n      code: normalizeIndent`\n        const fooQueryKeyFactory = {\n          foo: () => ['foo'] as const,\n          num: (num: number) => [...fooQueryKeyFactory.foo(), num] as const,\n        }\n        \n        const useFoo = (num: number) =>\n          useQuery({\n              queryKey: fooQueryKeyFactory.foo(1, num),\n              queryFn: () => Promise.resolve(num),\n          })\n      `,\n    },\n    {\n      name: 'should not fail when queryKey is a queryKeyFactory while having a dep is object prop',\n      code: normalizeIndent`\n        const fooQueryKeyFactory = {\n          foo: () => ['foo'] as const,\n          num: (num: number) => [...fooQueryKeyFactory.foo(), num] as const,\n        }\n        \n        const useFoo = (obj: { num: number }) =>\n          useQuery({\n              queryKey: fooQueryKeyFactory.foo(obj.num),\n              queryFn: () => Promise.resolve(obj.num),\n          })\n      `,\n    },\n    {\n      name: 'should not treat new Error as missing dependency',\n      code: normalizeIndent`\n        useQuery({\n          queryKey: ['foo'],\n          queryFn: () => Promise.reject(new Error('1')),\n        })\n      `,\n    },\n    {\n      name: 'should see id when there is a const assertion',\n      code: normalizeIndent`\n        const useX = (id: number) => {\n          return useQuery({\n            queryKey: ['foo', id] as const,\n            queryFn: async () => id,\n          })\n        }\n      `,\n    },\n    {\n      name: 'should not fail if queryKey is having the whole object while queryFn uses some props of it',\n      code: normalizeIndent`\n        const state = { foo: 'foo', bar: 'bar' }\n    \n        useQuery({\n            queryKey: ['state', state],\n            queryFn: () => Promise.resolve({ foo: state.foo, bar: state.bar })\n        })\n      `,\n    },\n    {\n      name: 'should not fail if queryKey does not include an internal dependency',\n      code: normalizeIndent`\n        useQuery({\n          queryKey: [\"api\"],\n          queryFn: async () => {\n            const response = Promise.resolve([]);\n            const data = await response.json();\n            return data[0].name;\n          },\n        });\n      `,\n    },\n    {\n      name: 'should ignore constants defined out of scope (react component, function declaration)',\n      code: `\n        const CONST_VAL = 1\n        function MyComponent() {\n          useQuery({\n            queryKey: [\"foo\"],\n            queryFn: () => CONST_VAL\n          });\n        }\n      `,\n    },\n    {\n      name: 'should ignore constants defined out of scope (react component, function expression)',\n      code: `\n        const CONST_VAL = 1\n        const MyComponent = () => {\n          useQuery({\n            queryKey: [\"foo\"],\n            queryFn: () => CONST_VAL\n          });\n        }\n      `,\n    },\n    {\n      name: 'should ignore constants defined out of scope (react component, anonymous function)',\n      code: `\n        const CONST_VAL = 1\n        const MyComponent = function () {\n          useQuery({\n            queryKey: [\"foo\"],\n            queryFn: () => CONST_VAL\n          });\n        }\n      `,\n    },\n    {\n      name: 'should ignore constants defined out of scope (non react component/hook function)',\n      code: `\n          const CONST_VAL = 1\n          function fn() {\n            return {\n              queryKey: [\"foo\"],\n              queryFn: () => CONST_VAL\n            }\n          }\n        `,\n    },\n    {\n      name: 'should ignore constants defined out of scope (react hook, function declaration)',\n      code: `\n        const CONST_VAL = 1\n        function useHook() {\n          useQuery({\n            queryKey: [\"foo\"],\n            queryFn: () => CONST_VAL\n          });\n        }\n      `,\n    },\n    {\n      name: 'should ignore constants defined out of scope (react hook, function expression)',\n      code: `\n        const CONST_VAL = 1\n        const useHook = () => {\n          useQuery({\n            queryKey: [\"foo\"],\n            queryFn: () => CONST_VAL\n          });\n        }\n      `,\n    },\n    {\n      name: 'should ignore constants defined out of scope (react hook, anonymous function)',\n      code: `\n        const CONST_VAL = 1\n        const useHook = function () {\n          useQuery({\n            queryKey: [\"foo\"],\n            queryFn: () => CONST_VAL\n          });\n        }\n      `,\n    },\n    {\n      name: 'should ignore references of the queryClient',\n      code: `\n        const CONST_VAL = 1\n        function useHook() {\n          const queryClient = useQueryClient()\n          const kueryKlient = useQueryClient()\n          useQuery({\n            queryKey: [\"foo\"],\n            queryFn: () => {\n                doSomething(queryClient)\n                queryClient.invalidateQueries()\n                doSomethingSus(kueryKlient)\n            }\n          });\n        }\n      `,\n    },\n  ],\n  invalid: [\n    {\n      name: 'should fail when deps are missing in query factory',\n      code: normalizeIndent`\n        const todoQueries = {\n          list: () => ({ queryKey: ['entity'], queryFn: fetchEntities }),\n          detail: (id) => ({ queryKey: ['entity'], queryFn: () => fetchEntity(id) })\n        }\n        `,\n      errors: [\n        {\n          messageId: 'missingDeps',\n          data: { deps: 'id' },\n          suggestions: [\n            {\n              messageId: 'fixTo',\n              data: { result: \"['entity', id]\" },\n              output: normalizeIndent`\n                const todoQueries = {\n                  list: () => ({ queryKey: ['entity'], queryFn: fetchEntities }),\n                  detail: (id) => ({ queryKey: ['entity', id], queryFn: () => fetchEntity(id) })\n                }\n              `,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'should fail when no deps are passed (react)',\n      code: normalizeIndent`\n        const id = 1;\n        useQuery({ queryKey: [\"entity\"], queryFn: () => api.getEntity(id) });\n      `,\n      errors: [\n        {\n          messageId: 'missingDeps',\n          data: { deps: 'id' },\n          suggestions: [\n            {\n              messageId: 'fixTo',\n              data: { result: '[\"entity\", id]' },\n              output: normalizeIndent`\n                const id = 1;\n                useQuery({ queryKey: [\"entity\", id], queryFn: () => api.getEntity(id) });\n              `,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'should fail when no deps are passed (solid)',\n      code: normalizeIndent`\n        const id = 1;\n        createQuery({ queryKey: [\"entity\"], queryFn: () => api.getEntity(id) });\n      `,\n      errors: [\n        {\n          messageId: 'missingDeps',\n          data: { deps: 'id' },\n          suggestions: [\n            {\n              messageId: 'fixTo',\n              data: { result: '[\"entity\", id]' },\n              output: normalizeIndent`\n                const id = 1;\n                createQuery({ queryKey: [\"entity\", id], queryFn: () => api.getEntity(id) });\n              `,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'should fail when deps are passed incorrectly',\n      code: normalizeIndent`\n        const id = 1;\n        useQuery({ queryKey: [\"entity/\\${id}\"], queryFn: () => api.getEntity(id) });\n      `,\n      errors: [\n        {\n          messageId: 'missingDeps',\n          data: { deps: 'id' },\n          suggestions: [\n            {\n              messageId: 'fixTo',\n              // eslint-disable-next-line no-template-curly-in-string\n              data: { result: '[\"entity/${id}\", id]' },\n              output: normalizeIndent`\n                const id = 1;\n                useQuery({ queryKey: [\"entity/\\${id}\", id], queryFn: () => api.getEntity(id) });\n              `,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'should pass missing dep while key has a template literal',\n      code: normalizeIndent`\n        const a = 1;\n        const b = 2;\n        useQuery({ queryKey: [\\`entity/\\${a}\\`], queryFn: () => api.getEntity(a, b) });\n      `,\n      errors: [\n        {\n          messageId: 'missingDeps',\n          data: { deps: 'b' },\n          suggestions: [\n            {\n              messageId: 'fixTo',\n              // eslint-disable-next-line no-template-curly-in-string\n              data: { result: '[`entity/${a}`, b]' },\n              output: normalizeIndent`\n                const a = 1;\n                const b = 2;\n                useQuery({ queryKey: [\\`entity/\\${a}\\`, b], queryFn: () => api.getEntity(a, b) });\n              `,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'should fail when dep exists inside setter and missing in queryKey',\n      code: normalizeIndent`\n        const [id] = React.useState(1);\n        useQuery({\n            queryKey: [\"entity\"],\n            queryFn: () => {\n                const { data } = axios.get(\\`.../\\${id}\\`);\n                return data;\n            }\n        });\n      `,\n      errors: [\n        {\n          messageId: 'missingDeps',\n          data: { deps: 'id' },\n          suggestions: [\n            {\n              messageId: 'fixTo',\n              data: { result: '[\"entity\", id]' },\n              output: normalizeIndent`\n                const [id] = React.useState(1);\n                useQuery({\n                    queryKey: [\"entity\", id],\n                    queryFn: () => {\n                        const { data } = axios.get(\\`.../\\${id}\\`);\n                        return data;\n                    }\n                });\n              `,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'should fail when dep does not exist while having a complex queryKey',\n      code: normalizeIndent`\n        const todoQueries = {\n          key: (a, b, c, d, e) => ({\n            queryKey: [\"entity\", a, [b], { c }, 1, true],\n            queryFn: () => api.getEntity(a, b, c, d, e)\n          })\n        }\n      `,\n      errors: [\n        {\n          messageId: 'missingDeps',\n          data: { deps: 'd, e' },\n          suggestions: [\n            {\n              messageId: 'fixTo',\n              data: { result: '[\"entity\", a, [b], { c }, 1, true, d, e]' },\n              output: normalizeIndent`\n                const todoQueries = {\n                  key: (a, b, c, d, e) => ({\n                    queryKey: [\"entity\", a, [b], { c }, 1, true, d, e],\n                    queryFn: () => api.getEntity(a, b, c, d, e)\n                  })\n                }\n              `,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'should fail when dep does not exist while having a complex queryKey #2',\n      code: normalizeIndent`\n        const todoQueries = {\n          key: (dep1, dep2, dep3, dep4, dep5, dep6, dep7, dep8) => ({\n            queryKey: ['foo', {dep1, dep2: dep2, bar: dep3, baz: [dep4, dep5]}, [dep6, dep7]],\n            queryFn: () => api.getEntity(dep1, dep2, dep3, dep4, dep5, dep6, dep7, dep8),\n          }),\n        };\n      `,\n      errors: [\n        {\n          messageId: 'missingDeps',\n          data: { deps: 'dep8' },\n          suggestions: [\n            {\n              messageId: 'fixTo',\n              data: {\n                result:\n                  \"['foo', {dep1, dep2: dep2, bar: dep3, baz: [dep4, dep5]}, [dep6, dep7], dep8]\",\n              },\n              output: normalizeIndent`\n                const todoQueries = {\n                  key: (dep1, dep2, dep3, dep4, dep5, dep6, dep7, dep8) => ({\n                    queryKey: ['foo', {dep1, dep2: dep2, bar: dep3, baz: [dep4, dep5]}, [dep6, dep7], dep8],\n                    queryFn: () => api.getEntity(dep1, dep2, dep3, dep4, dep5, dep6, dep7, dep8),\n                  }),\n                };\n              `,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'should fail when two deps that depend on each other are missing',\n      code: normalizeIndent`\n        function Component({ map, key }) {\n          useQuery({ queryKey: [\"key\"], queryFn: () => api.get(map[key]) });\n        }\n      `,\n      errors: [\n        {\n          messageId: 'missingDeps',\n          data: { deps: 'map[key]' },\n          suggestions: [\n            {\n              messageId: 'fixTo',\n              data: {\n                result: '[\"key\", map[key]]',\n              },\n              output: normalizeIndent`\n                function Component({ map, key }) {\n                  useQuery({ queryKey: [\"key\", map[key]], queryFn: () => api.get(map[key]) });\n                }\n              `,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'should fail when a queryKey is a reference of an array expression with a missing dep',\n      code: normalizeIndent`\n        const x = 5;\n        const queryKey = ['foo']\n        useQuery({ queryKey, queryFn: () => x })\n      `,\n      errors: [\n        {\n          messageId: 'missingDeps',\n          data: { deps: 'x' },\n          suggestions: [\n            {\n              messageId: 'fixTo',\n              data: {\n                result: \"['foo', x]\",\n              },\n              output: normalizeIndent`\n                const x = 5;\n                const queryKey = ['foo', x]\n                useQuery({ queryKey, queryFn: () => x })\n              `,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'should fail when a queryKey is a reference of an array expression with a missing dep',\n      code: normalizeIndent`\n        const x = 5;\n        const queryKey = ['foo']\n        useQuery({ queryKey, queryFn: () => x })\n      `,\n      errors: [\n        {\n          messageId: 'missingDeps',\n          data: { deps: 'x' },\n          suggestions: [\n            {\n              messageId: 'fixTo',\n              data: {\n                result: \"['foo', x]\",\n              },\n              output: normalizeIndent`\n                const x = 5;\n                const queryKey = ['foo', x]\n                useQuery({ queryKey, queryFn: () => x })\n              `,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'should fail when queryKey is a queryKeyFactory while having missing dep',\n      code: normalizeIndent`\n        const fooQueryKeyFactory = { foo: () => ['foo'] as const }\n\n        const useFoo = (num: number) =>\n          useQuery({\n              queryKey: fooQueryKeyFactory.foo(),\n              queryFn: () => Promise.resolve(num),\n          })\n      `,\n      errors: [\n        {\n          messageId: 'missingDeps',\n          data: { deps: 'num' },\n        },\n      ],\n    },\n    {\n      name: 'should fail if queryFn is using multiple object props when only one of them is in the queryKey',\n      code: normalizeIndent`\n        const state = { foo: 'foo', bar: 'bar' }\n    \n        useQuery({\n            queryKey: ['state', state.foo],\n            queryFn: () => Promise.resolve({ foo: state.foo, bar: state.bar })\n        })\n      `,\n      errors: [\n        {\n          messageId: 'missingDeps',\n          data: { deps: 'state.bar' },\n        },\n      ],\n    },\n  ],\n})\n"],"mappings":"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","names":[]}